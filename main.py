import telebot
from telebot import types
import json
import os

bot = telebot.TeleBot("8045858681:AAE5X-WBhgFkwcKSvLfeHYWGqAWCB6RCdds")  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

def load_users():
    with open("users.json", "r") as f:
        return json.load(f)

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f, indent=4)

def get_user(user_id):
    users = load_users()
    if str(user_id) not in users:
        users[str(user_id)] = {"balance": 10000000, "cars": []}  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –ø—É—Å—Ç–æ–π –≥–∞—Ä–∞–∂
        save_users(users)
    return users[str(user_id)]

def update_user(user_id, user_data):
    users = load_users()
    users[str(user_id)] = user_data
    save_users(users)

cars = {
    "BMW": [
        {"model": "BMW M5 F90", "price": 7000000},
        {"model": "BMW X5", "price": 5500000}
    ],
    "Mercedes": [
        {"model": "Mercedes E63", "price": 8000000},
        {"model": "Mercedes G63", "price": 9000000}
    ],
    "Toyota": [
        {"model": "Toyota Camry", "price": 3000000},
        {"model": "Toyota Land Cruiser", "price": 6500000}
    ]
}

# –°—Ç–∞—Ä—Ç –∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=["start", "–ø—Ä–æ—Ñ–∏–ª—å"])
def profile(message):
    user = get_user(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üöó –ê–≤—Ç–æ—Å–∞–ª–æ–Ω", "üöò –ì–∞—Ä–∞–∂")
    markup.row("üíº –ü—Ä–æ—Ñ–∏–ª—å")

    bot.send_message(
        message.chat.id,
        f"üë§ {message.from_user.first_name}\nüíº –ë–∞–ª–∞–Ω—Å: {user['balance']}‚ÇΩ",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == "üöó –ê–≤—Ç–æ—Å–∞–ª–æ–Ω")
def open_autosalon(message):
    show_brands(message)

@bot.message_handler(func=lambda m: m.text == "üöò –ì–∞—Ä–∞–∂")
def open_garage(message):
    garage(message)

@bot.message_handler(func=lambda m: m.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
def open_profile(message):
    profile(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–∞—Ä–∞–∂
def garage(message):
    user = get_user(message.from_user.id)
    if not user["cars"]:
        bot.send_message(message.chat.id, "üöó –£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—à–∏–Ω.")
    else:
        cars_text = "\n".join(user["cars"])
        bot.send_message(message.chat.id, f"üöò –¢–≤–æ–π –≥–∞—Ä–∞–∂:\n{cars_text}")

# –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–µ–Ω–¥—ã –º–∞—à–∏–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=["–∞–≤—Ç–æ—Å–∞–ª–æ–Ω"])
def show_brands(message):
    markup = types.InlineKeyboardMarkup()
    for brand in cars:
        markup.add(types.InlineKeyboardButton(brand, callback_data=f"brand_{brand}"))
    bot.send_message(message.chat.id, "üöó –í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:", reply_markup=markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
@bot.callback_query_handler(func=lambda c: c.data.startswith("brand_"))
def show_models(callback):
    brand = callback.data.split("_")[1]
    markup = types.InlineKeyboardMarkup()
    for car in cars[brand]:
        model = car["model"]
        price = car["price"]
        cb_data = f"buy_{brand}_{model.replace(' ', '_')}"
        markup.add(types.InlineKeyboardButton(f"{model} ‚Äî {price}‚ÇΩ", callback_data=cb_data))
    bot.send_message(callback.message.chat.id, f"üöò –ú–æ–¥–µ–ª–∏ {brand}:", reply_markup=markup)

# –ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback
@bot.callback_query_handler(func=lambda c: c.data.startswith("buy_"))
def buy_car(callback):
    data = callback.data.split("_")
    brand = data[1]
    model = "_".join(data[2:]).replace('_', ' ')
    
    user = get_user(callback.from_user.id)
    car_info = next((car for car in cars[brand] if car["model"] == model), None)
    if not car_info:
        bot.answer_callback_query(callback.id, "‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    price = car_info["price"]
    if user["balance"] < price:
        bot.answer_callback_query(callback.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –≤ –≥–∞—Ä–∞–∂
    user["balance"] -= price
    user["cars"].append(f"{brand} {model}")
    update_user(callback.from_user.id, user)

    bot.answer_callback_query(callback.id, f"‚úÖ –¢—ã –∫—É–ø–∏–ª {brand} {model} –∑–∞ {price}‚ÇΩ!")
    bot.send_message(callback.message.chat.id, f"üöó –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∫—É–ø–∏–ª {brand} {model}.\nüíº –ë–∞–ª–∞–Ω—Å: {user['balance']}‚ÇΩ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
