from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import asyncio
from database import add_user, get_user

router = Router()

class PassportState(StatesGroup):
    wait_for_first_name = State()
    wait_for_last_name = State()
    wait_for_age = State()
    wait_for_city = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data="go_to_gov")]
    ])
    await message.answer(
        "üèô Welcome to Evolution!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "go_to_gov")
async def go_to_government(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üöï –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ...\n‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 2 –º–∏–Ω—É—Ç—ã.")
    await asyncio.sleep(120)
    await callback.message.answer("üèõ –í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(PassportState.wait_for_first_name)
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏

@router.message(PassportState.wait_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(PassportState.wait_for_last_name)

@router.message(PassportState.wait_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(PassportState.wait_for_age)

@router.message(PassportState.wait_for_age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")
    await state.set_state(PassportState.wait_for_city)

@router.message(PassportState.wait_for_city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await add_user(
        user_id=message.from_user.id,
        first_name=data['first_name'],
        last_name=data['last_name'],
        age=data['age'],
        city=data['city']
    )

    passport_text = (
        f"ü™™ <b>–í–∞—à –ü–∞—Å–ø–æ—Ä—Ç</b>\n\n"
        f"üë§ –ò–º—è: {data['first_name']} {data['last_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['city']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: 5000‚ÇΩ\n"
        f"üïπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Evolution RP!"
    )

    await message.answer(passport_text, parse_mode="HTML")
    await state.clear()

@router.message(Command("passport"))
async def show_passport(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return

    user_id, first_name, last_name, age, city, balance, job, car, house = user
    text = (
        f"ü™™ <b>–ü–∞—Å–ø–æ—Ä—Ç</b>\n\n"
        f"üë§ –ò–º—è: {first_name} {last_name}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        f"üíº –†–∞–±–æ—Ç–∞: {job or '–ù–µ—Ç'}\n"
        f"üöó –ú–∞—à–∏–Ω–∞: {car or '–ù–µ—Ç'}\n"
        f"üè† –î–æ–º: {house or '–ù–µ—Ç'}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ"
    )
    await message.answer(text, parse_mode="HTML")
