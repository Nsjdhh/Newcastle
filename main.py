from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

API_TOKEN = '7646694075:AAHT0lVmi2rDDoErrCfK6uqj7T9_p74AAvQ'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PassportState(StatesGroup):
    wait_for_first_name = State()
    wait_for_last_name = State()
    wait_for_age = State()
    wait_for_city = State()

# –°—Ç–∞—Ä—Ç
@dp.message(commands=["start"])
async def cmd_start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data="go_to_gov")]
        ]
    )
    await message.answer("üèô Welcome to Evolution!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç.\n\n‚¨á –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
@dp.callback_query(lambda c: c.data == "go_to_gov")
async def go_to_government(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üöï –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ...\n‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 2 –º–∏–Ω—É—Ç—ã.")
    await asyncio.sleep(120)
    await callback.message.answer("üèõ –í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞.\n–î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –ø–∞—Å–ø–æ—Ä—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")
    await state.set_state(PassportState.wait_for_first_name)

# –ò–º—è
@dp.message(PassportState.wait_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *—Ñ–∞–º–∏–ª–∏—é*:")
    await state.set_state(PassportState.wait_for_last_name)

# –§–∞–º–∏–ª–∏—è
@dp.message(PassportState.wait_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–≤–æ–∑—Ä–∞—Å—Ç*:")
    await state.set_state(PassportState.wait_for_age)

# –í–æ–∑—Ä–∞—Å—Ç
@dp.message(PassportState.wait_for_age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è*:")
    await state.set_state(PassportState.wait_for_city)

# –ì–æ—Ä–æ–¥
@dp.message(PassportState.wait_for_city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    passport_text = (
        f"ü™™ *–í–∞—à –ü–∞—Å–ø–æ—Ä—Ç*\n\n"
        f"üë§ –ò–º—è: {data['first_name']} {data['last_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['city']}\n"
        f"üïπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Evolution!"
    )

    await message.answer(passport_text, parse_mode="Markdown")
    await state.clear()
