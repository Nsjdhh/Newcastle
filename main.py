import os
import sys
import telebot

# ‚úÖ –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
print("BOT_TOKEN –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", os.environ.get("BOT_TOKEN"))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = os.environ.get("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
if not token:
    print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å Environment –≤ Render.")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–æ–∫–µ–Ω–µ ‚Äî –æ—à–∏–±–∫–∞
if any(char.isspace() for char in token):
    print("‚ùå BOT_TOKEN —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã! –£–¥–∞–ª–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã.")
    sys.exit(1)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling() import telebot
from telebot import types
import random
import json
import os

bot = telebot.TeleBot("8045858681:AAE5X-WBhgFkwcKSvLfeHYWGqAWCB6RCdds")

# üìÅ –§–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

def load_users():
    with open("users.json", "r") as f:
        return json.load(f)

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f)

def get_balance(user_id):
    users = load_users()
    return users.get(str(user_id), 1000)  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 1000

def update_balance(user_id, new_balance):
    users = load_users()
    users[str(user_id)] = new_balance
    save_users(users)

# üìä –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
@bot.message_handler(commands=['profile'])
def profile(message):
    balance = get_balance(message.from_user.id)
    bot.send_message(message.chat.id, f"üíº –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ")

# üé∞ –ö–∞–∑–∏–Ω–æ - –ø—Ä–æ—Å–∏—Ç —Å—Ç–∞–≤–∫—É
@bot.message_handler(commands=['casino'])
def casino(message):
    msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(msg, play_casino)

# üé≤ –ò–≥—Ä–∞
def play_casino(message):
    user_id = message.from_user.id
    try:
        bet = int(message.text)
        balance = get_balance(user_id)
        if bet <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        if bet > balance:
            bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.")
            return

        symbols = ['üçí', 'üçã', 'üíé', '7Ô∏è‚É£', 'üîî']
        s1 = random.choice(symbols)
        s2 = random.choice(symbols)
        s3 = random.choice(symbols)
        result = f"{s1} | {s2} | {s3}"

        if s1 == s2 == s3:
            win = bet * 3
            balance += win
            text = f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {win}‚ÇΩ!\n{result}"
        else:
            balance -= bet
            text = f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet}‚ÇΩ.\n{result}"

        update_balance(user_id, balance)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="casino_again"))
        bot.send_message(message.chat.id, f"{text}\nüíº –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ", reply_markup=markup)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

# üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–≥—Ä—É
@bot.callback_query_handler(func=lambda c: c.data == "casino_again")
def again_callback(c):
    casino(c.message)

