import telebot
from telebot import types
import json
import os

bot = telebot.TeleBot("8045858681:AAE5X-WBhgFkwcKSvLfeHYWGqAWCB6RCdds")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    with open("users.json", "r") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f)

# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id):
    users = load_users()
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {"balance": 0, "cars": []}
        save_users(users)
    return users[user_id]

# –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user(user_id, data):
    users = load_users()
    users[str(user_id)] = data
    save_users(users)
    @bot.message_handler(commands=['start'])
def start(message):
    user = get_user(message.from_user.id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üöó –ê–≤—Ç–æ—Å–∞–ª–æ–Ω", "üöò –ì–∞—Ä–∞–∂")
    markup.row("üíº –ü—Ä–æ—Ñ–∏–ª—å")

    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–†–ú–ü –ø—Ä–æ–µ–∫—Ç Newcastle City!",
        reply_markup=markup
        @bot.message_handler(func=lambda message: message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user = get_user(message.from_user.id)
    bot.send_message(message.chat.id, f"üë§ –ò–º—è: {message.from_user.first_name}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}‚ÇΩ")
    )
    # –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
cars = {
    "Toyota": [
        {"model": "Camry", "price": 1500000, "photo": "https://example.com/toyota_camry.jpg"},
        {"model": "Corolla", "price": 1200000, "photo": "https://example.com/toyota_corolla.jpg"}
    ],
    "BMW": [
        {"model": "X5", "price": 4500000, "photo": "https://example.com/bmw_x5.jpg"},
        {"model": "M3", "price": 6000000, "photo": "https://example.com/bmw_m3.jpg"}
    ]
}

@bot.message_handler(func=lambda message: message.text == "üöó –ê–≤—Ç–æ—Å–∞–ª–æ–Ω")
def show_brands(message):
    markup = types.InlineKeyboardMarkup()
    for brand in cars.keys():
        markup.add(types.InlineKeyboardButton(text=brand, callback_data=f"brand_{brand}"))
    bot.send_message(message.chat.id, "üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("brand_"))
def show_models(call):
    brand = call.data.split("_")[1]
    markup = types.InlineKeyboardMarkup()
    for car in cars[brand]:
        model = car["model"]
        price = car["price"]
        cb_data = f"buy_{brand}_{model.replace(' ', '_')}"
        markup.add(types.InlineKeyboardButton(text=f"{model} ‚Äî {price}‚ÇΩ", callback_data=cb_data))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"üöó –ú–æ–¥–µ–ª–∏ {brand}:", reply_markup=markup)
    @bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def buy_car(call):
    user = get_user(call.from_user.id)
    data = call.data.split("_")
    brand = data[1]
    model = data[2].replace('_', ' ')

    # –ù–∞–π–¥—ë–º –º–∞—à–∏–Ω—É –≤ —Å–ø–∏—Å–∫–µ
    car = next((c for c in cars[brand] if c["model"] == model), None)
    if car is None:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    price = car["price"]
    if user["balance"] < price:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –≤ –≥–∞—Ä–∞–∂
    user["balance"] -= price
    user["cars"].append(f"{brand} {model}")
    update_user(call.from_user.id, user)

    bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {brand} {model} –∑–∞ {price}‚ÇΩ!")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"üéâ –í—ã –∫—É–ø–∏–ª–∏ {brand} {model}!\nüí∞ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {user['balance']}‚ÇΩ")
    @bot.message_handler(func=lambda message: message.text == "üöò –ì–∞—Ä–∞–∂")
def garage(message):
    user = get_user(message.from_user.id)
    if not user["cars"]:
        bot.send_message(message.chat.id, "üöó –£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—à–∏–Ω –≤ –≥–∞—Ä–∞–∂–µ.")
    else:
        cars_list = "\n".join(user["cars"])
        bot.send_message(message.chat.id, f"üöò –¢–≤–æ–π –≥–∞—Ä–∞–∂:\n{cars_list}")
        bot.polling(none_stop=True)
    
