import telebot
from telebot import types
import json
import os

bot = telebot.TeleBot("8045858681:AAE5X-WBhgFkwcKSvLfeHYWGqAWCB6RCdds")  # –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def load_users():
    if not os.path.exists("users.json"):
        with open("users.json", "w") as f:
            json.dump({}, f)
    with open("users.json", "r") as f:
        return json.load(f)

def save_users(data):
    with open("users.json", "w") as f:
        json.dump(data, f)

def get_user(uid):
    users = load_users()
    return users.get(str(uid), {"balance": 5000000, "cars": []})

def update_user(uid, data):
    users = load_users()
    users[str(uid)] = data
    save_users(users)

# --- –ê–≤—Ç–æ—Å–∞–ª–æ–Ω (–º–∞—à–∏–Ω—ã) ---
cars = {
    "BMW": [
        {
            "model": "M5 F90",
            "price": 8000000,
            "photo": "https://i.imgur.com/xULvLWh.jpg"
        },
        {
            "model": "X6 M",
            "price": 9000000,
            "photo": "https://i.imgur.com/EWa1G8J.jpg"
        }
    ],
    "Mercedes": [
        {
            "model": "S600",
            "price": 10000000,
            "photo": "https://i.imgur.com/PKX3UTk.jpg"
        }
    ],
    "Toyota": [
        {
            "model": "Camry",
            "price": 3000000,
            "photo": "https://i.imgur.com/htqTXuO.jpg"
        }
    ]
}

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=["start", "–ø—Ä–æ—Ñ–∏–ª—å"])
def profile(message):
    user = get_user(message.from_user.id)
    bot.send_message(message.chat.id, f"üë§ {message.from_user.first_name}\nüíº –ë–∞–ª–∞–Ω—Å: {user['balance']}‚ÇΩ")

@bot.message_handler(commands=["–≥–∞—Ä–∞–∂"])
def garage(message):
    user = get_user(message.from_user.id)
    if not user["cars"]:
        bot.send_message(message.chat.id, "üöó –£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—à–∏–Ω.")
    else:
        cars_text = "\n".join(user["cars"])
        bot.send_message(message.chat.id, f"üöò –¢–≤–æ–π –≥–∞—Ä–∞–∂:\n{cars_text}")

@bot.message_handler(commands=["–∞–≤—Ç–æ—Å–∞–ª–æ–Ω"])
def show_brands(message):
    markup = types.InlineKeyboardMarkup()
    for brand in cars:
        markup.add(types.InlineKeyboardButton(brand, callback_data=f"brand_{brand}"))
    bot.send_message(message.chat.id, "üöó –í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("brand_"))
def show_models(callback):
    brand = callback.data.split("_")[1]
    markup = types.InlineKeyboardMarkup()
    for car in cars[brand]:
        model = car["model"]
        price = car["price"]
        cb_data = f"buy_{brand}_{model.replace(' ', '_')}"
        markup.add(types.InlineKeyboardButton(f"{model} ‚Äî {price}‚ÇΩ", callback_data=cb_data))
    bot.edit_message_text(f"üöò –ú–æ–¥–µ–ª–∏ {brand}:", callback.message.chat.id, callback.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("buy_"))
def show_car(callback):
    _, brand, model_raw = callback.data.split("_", 2)
    model = model_raw.replace("_", " ")
    car = next((c for c in cars[brand] if c["model"] == model), None)
    if not car:
        bot.answer_callback_query(callback.id, "‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    caption = f"üöò {brand} {model}\nüí∞ –¶–µ–Ω–∞: {car['price']}‚ÇΩ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"confirm_{brand}_{model_raw}"))
    bot.send_photo(callback.message.chat.id, car["photo"], caption=caption, reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("confirm_"))
def buy_car(callback):
    _, brand, model_raw = callback.data.split("_", 2)
    model = model_raw.replace("_", " ")
    car = next((c for c in cars[brand] if c["model"] == model), None)
    if not car:
        bot.answer_callback_query(callback.id, "‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    user = get_user(callback.from_user.id)
    if user["balance"] < car["price"]:
        bot.answer_callback_query(callback.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    user["balance"] -= car["price"]
    user["cars"].append(f"{brand} {model}")
    update_user(callback.from_user.id, user)
    bot.send_message(callback.message.chat.id, f"‚úÖ –¢—ã –∫—É–ø–∏–ª {brand} {model}!\nüíº –û—Å—Ç–∞—Ç–æ–∫: {user['balance']}‚ÇΩ")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling()
