import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ----------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ----------------------
TOKEN = os.environ.get("8138082544:AAHqJk48idUEqP2nIi-UuX9fvqLDesBeYrA")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
with open("data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# –ò–≥—Ä–æ–∫–∏: user_id -> {money, job, experience, licenses, character}
users = {}

# ----------------------
# –ö–æ–º–∞–Ω–¥—ã
# ----------------------
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"money":0, "job":None, "experience":0, "licenses":[], "character":None}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üßΩ –°–ø–∞–Ω—á –ë–æ–±", "‚≠ê –ü–∞—Ç—Ä–∏–∫", "ü¶Ä –ú–∏—Å—Ç–µ—Ä –ö—Ä–∞–±—Å", "üêøÔ∏è –°—ç–Ω–¥–∏")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["üßΩ –°–ø–∞–Ω—á –ë–æ–±","‚≠ê –ü–∞—Ç—Ä–∏–∫","ü¶Ä –ú–∏—Å—Ç–µ—Ä –ö—Ä–∞–±—Å","üêøÔ∏è –°—ç–Ω–¥–∏"])
async def choose_character(message: types.Message):
    user_id = message.from_user.id
    users[user_id]["character"] = message.text
    await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n/–≤—ã–±—Ä–∞—Ç—å—Ä–∞–±–æ—Ç—É <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–∞–±–æ—Ç—ã>")

@dp.message_handler(commands=["–≤—ã–±—Ä–∞—Ç—å—Ä–∞–±–æ—Ç—É"])
async def choose_job(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏ —Ä–∞–±–æ—Ç—É: /–≤—ã–±—Ä–∞—Ç—å—Ä–∞–±–æ—Ç—É <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    job_name = args[1]
    if job_name not in data["jobs"]:
        await message.reply("–¢–∞–∫–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç.")
        return
    users[user_id]["job"] = job_name
    await message.reply(f"–í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É: {job_name}")

@dp.message_handler(commands=["—Ä–∞–±–æ—Ç–∞—Ç—å"])
async def work(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user or not user["job"]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É: /–≤—ã–±—Ä–∞—Ç—å—Ä–∞–±–æ—Ç—É <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    job = data["jobs"][user["job"]]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—ã—Ç
    if user["experience"] < job["requirements"]["experience_days"]:
        await message.reply(f"–¢—Ä–µ–±—É–µ—Ç—Å—è {job['requirements']['experience_days']} –¥–Ω–µ–π –æ–ø—ã—Ç–∞ –¥–ª—è —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    license_needed = job["requirements"]["license"]
    if license_needed and license_needed not in user["licenses"]:
        await message.reply(f"–î–ª—è —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è: {license_needed}")
        return

    user["money"] += job["salary_day"]
    user["experience"] += 1
    await message.reply(f"–í—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–µ–Ω—å! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {job['salary_day']} ‚ÇΩ\n–í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {user['money']} ‚ÇΩ\n–û–ø—ã—Ç: {user['experience']} –¥–Ω–µ–π.")

@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
async def balance(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user:
        await message.reply("–¢—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É: /start")
        return
    await message.reply(f"–£ —Ç–µ–±—è {user['money']} ‚ÇΩ")

@dp.message_handler(commands=["–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é"])
async def buy_license(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏ –ª–∏—Ü–µ–Ω–∑–∏—é: /–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    license_name = args[1]
    if license_name not in data["licenses"]:
        await message.reply("–¢–∞–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ—Ç.")
        return
    price = data["licenses"][license_name]
    if user["money"] < price:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –¶–µ–Ω–∞: {price} ‚ÇΩ")
        return
    user["money"] -= price
    user["licenses"].append(license_name)
    await message.reply(f"–õ–∏—Ü–µ–Ω–∑–∏—è {license_name} –∫—É–ø–ª–µ–Ω–∞! –û—Å—Ç–∞—Ç–æ–∫: {user['money']} ‚ÇΩ")

@dp.message_handler(commands=["–º–∞—à–∏–Ω—ã"])
async def list_cars(message: types.Message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n"
    for car, price in data["cars"].items():
        text += f"{car} ‚Äî {price} ‚ÇΩ\n"
    await message.reply(text)

@dp.message_handler(commands=["–∫—É–ø–∏—Ç—å–º–∞—à–∏–Ω—É"])
async def buy_car(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏ –º–∞—à–∏–Ω—É: /–∫—É–ø–∏—Ç—å–º–∞—à–∏–Ω—É <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    car_name = args[1]
    if car_name not in data["cars"]:
        await message.reply("–¢–∞–∫–æ–π –º–∞—à–∏–Ω—ã –Ω–µ—Ç.")
        return
    price = data["cars"][car_name]
    if user["money"] < price:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –¶–µ–Ω–∞: {price} ‚ÇΩ")
        return
    user["money"] -= price
    user.setdefault("cars_owned", []).append(car_name)
    await message.reply(f"–í—ã –∫—É–ø–∏–ª–∏ {car_name}! –û—Å—Ç–∞—Ç–æ–∫: {user['money']} ‚ÇΩ")

# ----------------------
# –ó–∞–ø—É—Å–∫
# ----------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
