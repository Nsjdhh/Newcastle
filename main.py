import os
import sys
import telebot

# ‚úÖ –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
print("BOT_TOKEN –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", os.environ.get("BOT_TOKEN"))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = os.environ.get("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
if not token:
    print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å Environment –≤ Render.")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–æ–∫–µ–Ω–µ ‚Äî –æ—à–∏–±–∫–∞
if any(char.isspace() for char in token):
    print("‚ùå BOT_TOKEN —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã! –£–¥–∞–ª–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã.")
    sys.exit(1)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling() import os
import json
import random
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# ======= –ë–ê–õ–ê–ù–° =========

if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

def load_users():
    with open("users.json", "r") as f:
        return json.load(f)

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f)

def get_balance(user_id):
    users = load_users()
    return users.get(str(user_id), 1000)

def update_balance(user_id, new_balance):
    users = load_users()
    users[str(user_id)] = new_balance
    save_users(users)

# ======= –ö–û–ú–ê–ù–î–ê /profile =======

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(f"üíº –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ")

# ======= –ö–û–ú–ê–ù–î–ê /casino =======

async def casino(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")

    return await context.user_data.update({"waiting_bet": True})

# ======= –û–ë–†–ê–ë–û–¢–ö–ê –ß–ò–°–õ–ê =======

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_bet"):
        user_id = update.message.from_user.id
        try:
            bet = int(update.message.text)
            balance = get_balance(user_id)

            if bet <= 0:
                await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return
            if bet > balance:
                await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.")
                return

            symbols = ['üçí', 'üçã', 'üíé', '7Ô∏è‚É£', 'üîî']
            s1, s2, s3 = random.choices(symbols, k=3)
            result = f"{s1} | {s2} | {s3}"

            if s1 == s2 == s3:
                win = bet * 3
                balance += win
                text = f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {win}‚ÇΩ!\n{result}"
            else:
                balance -= bet
                text = f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet}‚ÇΩ.\n{result}"

            update_balance(user_id, balance)

            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="casino_again")]
            ])

            await update.message.reply_text(f"{text}\nüíº –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ", reply_markup=markup)
            context.user_data["waiting_bet"] = False

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /casino —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")

# ======= –ö–ù–û–ü–ö–ê "–ò–ì–†–ê–¢–¨ –°–ù–û–í–ê" =======

async def casino_again(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["waiting_bet"] = True
    await query.message.reply_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")

# ======= –ó–ê–ü–£–°–ö –ë–û–¢–ê =======

app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("casino", casino))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(casino_again, pattern="casino_again"))

app.run_polling()
